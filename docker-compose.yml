version: "3"

services:
  frontend:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
      args:
        - APP_ENV=${APP_ENV} # Pass APP_ENV arg to Dockerfile
    volumes: # Mount src folder in host machine to the container (trick for hot reloading)
      - ./frontend/app:/usr/src/app/app
      - ./frontend/components:/usr/src/app/components
      - ./frontend/providers:/usr/src/app/providers
      - ./frontend/config:/usr/src/app/config
      - ./frontend/generated:/usr/src/app/generated
      - ./frontend/public:/usr/src/app/public
      - .env:/usr/src/.env
    command: [sh, -c, "npm run start:${APP_ENV}"]
    ports:
      - "3000:3000"
  backend:
    depends_on: # For migrating database and generate static page when building frontend production
      database:
        condition: service_healthy
    stdin_open: true # https://github.com/prisma/prisma/issues/4669
    tty: true 
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - APP_ENV=${APP_ENV} # Pass APP_ENV arg to Dockerfile
    volumes: # Mount src folder in host machine to the container (trick for hot reloading)
      - ./backend/generated:/usr/src/app/generated
      - ./backend/src:/usr/src/app/src
      - .env:/usr/src/.env
    command: [sh, -c, "npm run migrate:${APP_ENV} && npm run start:${APP_ENV}"]
    ports:
      - "8080:8080"
  database:
    image: postgres:15.3-alpine
    restart: always
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]
      interval: 1s
      timeout: 3s
      retries: 30
    volumes:
      - app-data:/var/lib/postgresql/${DB_NAME}/data
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
  proxy:
    depends_on: # For bypass checking connecting to upstream
      - frontend
      - backend
    restart: always
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    
volumes: # Create user defined volumn for sharing data among multiple services
  app-data: 

# networks: # Create user defined network for comunicating among multiple services
#   app-network: